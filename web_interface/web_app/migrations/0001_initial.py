# Generated by Django 3.0.2 on 2020-03-06 07:22

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Actuator',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('userid', models.IntegerField(db_column='UserId')),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
                ('timestamp', models.DateTimeField(db_column='Timestamp')),
                ('slotcount', models.IntegerField(db_column='SlotCount')),
                ('active', models.BooleanField(blank=True, db_column='Active', null=True)),
            ],
            options={
                'db_table': 'Actuator',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Amplitudedistribution',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('data', models.BinaryField(db_column='Data')),
                ('timestamp', models.DateTimeField(db_column='Timestamp')),
                ('active', models.BooleanField(db_column='Active')),
                ('userid', models.IntegerField(db_column='UserId')),
            ],
            options={
                'db_table': 'AmplitudeDistribution',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Analyticalline',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('energy', models.FloatField(blank=True, db_column='Energy', null=True)),
            ],
            options={
                'db_table': 'AnalyticalLine',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True)),
            ],
            options={
                'db_table': 'auth_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroupPermissions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_group_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('codename', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'auth_permission',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('is_superuser', models.BooleanField()),
                ('username', models.CharField(max_length=150, unique=True)),
                ('first_name', models.CharField(max_length=30)),
                ('last_name', models.CharField(max_length=150)),
                ('email', models.CharField(max_length=254)),
                ('is_staff', models.BooleanField()),
                ('is_active', models.BooleanField()),
                ('date_joined', models.DateTimeField()),
            ],
            options={
                'db_table': 'auth_user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserGroups',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_user_groups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserUserPermissions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_user_user_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Basesetup',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'BaseSetup',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Calendar',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('idCalendar', models.IntegerField(db_column='Id')),
                ('time', models.DateTimeField(blank=True, db_column='Time', null=True)),
                ('days', models.IntegerField(blank=True, db_column='Days', null=True)),
            ],
            options={
                'db_table': 'Calendar',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Channelsetup',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('name', models.TextField(db_column='Name')),
                ('channelnumber', models.SmallIntegerField(db_column='ChannelNumber')),
                ('lolevel', models.FloatField(db_column='LoLevel')),
                ('window', models.FloatField(db_column='Window')),
                ('gain', models.FloatField(db_column='Gain')),
                ('voltage', models.FloatField(db_column='Voltage')),
            ],
            options={
                'db_table': 'ChannelSetup',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Chemicalelement',
            fields=[
                ('atomicnumber', models.SmallIntegerField(db_column='AtomicNumber', primary_key=True, serialize=False)),
                ('symbol', models.CharField(db_column='Symbol', max_length=5, unique=True)),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
                ('period', models.SmallIntegerField(blank=True, db_column='Period', null=True)),
                ('group', models.SmallIntegerField(blank=True, db_column='Group', null=True)),
                ('atomicmass', models.FloatField(blank=True, db_column='AtomicMass', null=True)),
                ('density', models.FloatField(blank=True, db_column='Density', null=True)),
                ('boilingpoint', models.FloatField(blank=True, db_column='BoilingPoint', null=True)),
                ('meltingpoint', models.FloatField(blank=True, db_column='MeltingPoint', null=True)),
                ('electronegativityallredandrochov', models.FloatField(blank=True, db_column='ElectronegativityAllredAndRochov', null=True)),
                ('electronegativitypauling', models.FloatField(blank=True, db_column='ElectronegativityPauling', null=True)),
            ],
            options={
                'db_table': 'ChemicalElement',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Chemicalelementsfamily',
            fields=[
                ('id', models.IntegerField(db_column='Id', primary_key=True, serialize=False)),
                ('name', models.TextField(db_column='Name')),
            ],
            options={
                'db_table': 'ChemicalElementsFamily',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Correction',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('coefficient', models.FloatField(db_column='Coefficient')),
            ],
            options={
                'db_table': 'Correction',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Correctiontype',
            fields=[
                ('id', models.IntegerField(db_column='Id', primary_key=True, serialize=False)),
                ('name', models.TextField(db_column='Name')),
            ],
            options={
                'db_table': 'CorrectionType',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Criterion',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('value', models.FloatField(db_column='Value')),
            ],
            options={
                'db_table': 'Criterion',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Criteriontype',
            fields=[
                ('id', models.IntegerField(db_column='Id', primary_key=True, serialize=False)),
                ('name', models.TextField(db_column='Name')),
            ],
            options={
                'db_table': 'CriterionType',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Cycle',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('doubleloop', models.BooleanField(db_column='DoubleLoop')),
                ('length', models.IntegerField(db_column='Length')),
                ('uniform', models.BooleanField(db_column='Uniform')),
                ('maxmovementtime', models.IntegerField(db_column='MaxMovementTime')),
            ],
            options={
                'db_table': 'Cycle',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoAdminLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_time', models.DateTimeField()),
                ('object_id', models.TextField(blank=True, null=True)),
                ('object_repr', models.CharField(max_length=200)),
                ('action_flag', models.SmallIntegerField()),
                ('change_message', models.TextField()),
            ],
            options={
                'db_table': 'django_admin_log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoContentType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_label', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'django_content_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoMigrations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('applied', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_migrations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoSession',
            fields=[
                ('session_key', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('session_data', models.TextField()),
                ('expire_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_session',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Emissionline',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('priority', models.IntegerField(db_column='Priority')),
                ('name', models.TextField(db_column='Name', unique=True)),
            ],
            options={
                'db_table': 'EmissionLine',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('timestamp', models.DateTimeField(db_column='Timestamp')),
                ('userid', models.IntegerField(blank=True, db_column='UserId', null=True)),
                ('name', models.TextField(db_column='Name')),
                ('description', models.TextField(blank=True, db_column='Description', null=True)),
                ('oldvalue', models.TextField(blank=True, db_column='OldValue', null=True)),
                ('newvalue', models.TextField(blank=True, db_column='NewValue', null=True)),
                ('emergency', models.BooleanField(db_column='Emergency')),
            ],
            options={
                'db_table': 'Event',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Eventsource',
            fields=[
                ('id', models.IntegerField(db_column='Id', primary_key=True, serialize=False)),
                ('name', models.TextField(db_column='Name')),
            ],
            options={
                'db_table': 'EventSource',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Measurement',
            fields=[
                ('unused', models.BooleanField(db_column='Unused')),
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('timestamp', models.DateTimeField(blank=True, db_column='TimeStamp', null=True)),
                ('userid', models.IntegerField(blank=True, db_column='UserId', null=True)),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
                ('guid', models.UUIDField(blank=True, db_column='Guid', null=True)),
                ('shiftnumber', models.IntegerField(blank=True, db_column='ShiftNumber', null=True)),
            ],
            options={
                'db_table': 'Measurement',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Measurementdatamap',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False, unique=True)),
            ],
            options={
                'db_table': 'MeasurementDataMap',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Measurementtype',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('name', models.TextField(db_column='Name', unique=True)),
            ],
            options={
                'db_table': 'MeasurementType',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Metainfo',
            fields=[
                ('id', models.IntegerField(db_column='Id', primary_key=True, serialize=False)),
                ('name', models.TextField(db_column='Name')),
                ('strvalue', models.TextField(blank=True, db_column='StrValue', null=True)),
                ('intvalue', models.IntegerField(blank=True, db_column='IntValue', null=True)),
            ],
            options={
                'db_table': 'MetaInfo',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Modbus',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('active', models.BooleanField(blank=True, db_column='Active', null=True)),
                ('pinginterval', models.IntegerField(blank=True, db_column='PingInterval', null=True)),
                ('connecttype', models.TextField(blank=True, db_column='ConnectType', null=True)),
                ('tcpaddress', models.TextField(blank=True, db_column='TCPAddress', null=True)),
                ('tcpport', models.IntegerField(blank=True, db_column='TCPPort', null=True)),
                ('rtuport', models.TextField(blank=True, db_column='RTUPort', null=True)),
                ('rtuspeed', models.IntegerField(blank=True, db_column='RTUSpeed', null=True)),
                ('rtuparity', models.TextField(blank=True, db_column='RTUParity', null=True)),
                ('rtustartbits', models.IntegerField(blank=True, db_column='RTUStartBits', null=True)),
                ('rtustopbits', models.IntegerField(blank=True, db_column='RTUStopBits', null=True)),
                ('rtumodbusaddress', models.IntegerField(blank=True, db_column='RTUModbusAddress', null=True)),
            ],
            options={
                'db_table': 'Modbus',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Object',
            fields=[
                ('unused', models.BooleanField(db_column='Unused')),
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('objecttypeid', models.IntegerField(db_column='ObjectTypeId')),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
                ('data', models.BinaryField(blank=True, db_column='Data', null=True)),
                ('description', models.TextField(blank=True, db_column='Description', null=True)),
                ('creationtimestamp', models.DateTimeField(db_column='CreationTimestamp')),
                ('guid', models.UUIDField(blank=True, db_column='Guid', null=True)),
                ('userid', models.IntegerField(db_column='UserId')),
                ('active', models.BooleanField(db_column='Active')),
            ],
            options={
                'db_table': 'Object',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Objectgroup',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('name', models.TextField(db_column='Name')),
                ('description', models.TextField(blank=True, db_column='Description', null=True)),
            ],
            options={
                'db_table': 'ObjectGroup',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Objectgroupobject',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'ObjectGroupObject',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Objectquantitymap',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'ObjectQuantityMap',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Objecttype',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('name', models.TextField(db_column='Name', unique=True)),
            ],
            options={
                'db_table': 'ObjectType',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Pointparameter',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('objectid', models.IntegerField(blank=True, db_column='ObjectId', null=True)),
                ('secondloop', models.BooleanField(db_column='SecondLoop')),
                ('slotnumber', models.IntegerField(blank=True, db_column='SlotNumber', null=True)),
                ('pointnumber', models.IntegerField(blank=True, db_column='PointNumber', null=True)),
                ('cutoffduration', models.IntegerField(blank=True, db_column='CutOffDuration', null=True)),
                ('timebeforeanalytic', models.TimeField(blank=True, db_column='TimeBeforeAnalytic', null=True)),
                ('pulppumpingduration', models.TimeField(blank=True, db_column='PulpPumpingDuration', null=True)),
                ('washingduration', models.TimeField(blank=True, db_column='WashingDuration', null=True)),
                ('cutoffdelay', models.TimeField(blank=True, db_column='CutOffDelay', null=True)),
                ('pumppulse', models.FloatField(blank=True, db_column='PumpPulse', null=True)),
                ('pumppulsepause', models.FloatField(blank=True, db_column='PumpPulsePause', null=True)),
                ('washingdurationwm', models.TimeField(blank=True, db_column='WashingDurationWM', null=True)),
                ('pausedurationwm', models.TimeField(blank=True, db_column='PauseDurationWM', null=True)),
            ],
            options={
                'db_table': 'PointParameter',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Programproductdependence',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('programguid', models.UUIDField(db_column='ProgramGuid')),
                ('productguid', models.UUIDField(blank=True, db_column='ProductGuid', null=True)),
            ],
            options={
                'db_table': 'ProgramProductDependence',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Property',
            fields=[
                ('key', models.TextField(db_column='Key', primary_key=True, serialize=False)),
                ('value', models.TextField(db_column='Value')),
            ],
            options={
                'db_table': 'Property',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Quantity',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('name', models.TextField(db_column='Name')),
            ],
            options={
                'db_table': 'Quantity',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Quantitygroup',
            fields=[
                ('id', models.IntegerField(db_column='Id', primary_key=True, serialize=False)),
                ('name', models.TextField(db_column='Name')),
            ],
            options={
                'db_table': 'QuantityGroup',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Quantitytype',
            fields=[
                ('id', models.IntegerField(db_column='Id', primary_key=True, serialize=False)),
                ('name', models.TextField(db_column='Name', unique=True)),
            ],
            options={
                'db_table': 'QuantityType',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Setupinfo',
            fields=[
                ('unused', models.BooleanField(db_column='Unused')),
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
                ('userid', models.IntegerField(db_column='UserId')),
                ('timestamp', models.DateTimeField(db_column='Timestamp')),
                ('active', models.BooleanField(db_column='Active')),
            ],
            options={
                'db_table': 'SetupInfo',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Slot',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('number', models.IntegerField(db_column='Number')),
                ('group', models.IntegerField(db_column='Group')),
                ('exposure', models.IntegerField(db_column='Exposure')),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
            ],
            options={
                'db_table': 'Slot',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Sourcetype',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('name', models.TextField(db_column='Name', unique=True)),
            ],
            options={
                'db_table': 'SourceType',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Transitionmatrix',
            fields=[
                ('unused', models.BooleanField(db_column='Unused')),
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('name', models.TextField(db_column='Name')),
                ('exposure', models.FloatField(db_column='Exposure')),
                ('meascount', models.SmallIntegerField(db_column='MeasCount')),
                ('userid', models.IntegerField(db_column='UserId')),
                ('timestamp', models.DateTimeField(db_column='Timestamp')),
                ('data', models.BinaryField(db_column='Data')),
                ('active', models.BooleanField(db_column='Active')),
            ],
            options={
                'db_table': 'TransitionMatrix',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Unit',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('name', models.TextField(db_column='Name')),
                ('shortname', models.TextField(blank=True, db_column='ShortName', null=True)),
            ],
            options={
                'db_table': 'Unit',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Unusable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unused', models.BooleanField(db_column='Unused')),
            ],
            options={
                'db_table': 'Unusable',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Userinfo',
            fields=[
                ('userid', models.AutoField(db_column='UserId', primary_key=True, serialize=False)),
                ('name', models.TextField(blank=True, db_column='Name', null=True)),
                ('email', models.TextField(blank=True, db_column='Email', null=True)),
                ('dbid', models.IntegerField(db_column='DbId')),
            ],
            options={
                'db_table': 'UserInfo',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Value',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('value', models.FloatField(db_column='Value')),
                ('multiplicity', models.SmallIntegerField(blank=True, db_column='Multiplicity', null=True)),
                ('absoluteerror', models.FloatField(blank=True, db_column='AbsoluteError', null=True)),
                ('exposure', models.FloatField(blank=True, db_column='Exposure', null=True)),
                ('criteria', models.IntegerField(blank=True, db_column='Criteria', null=True)),
                ('setupid', models.IntegerField(blank=True, db_column='SetupId', null=True)),
            ],
            options={
                'db_table': 'Value',
                'managed': False,
            },
        ),
    ]
